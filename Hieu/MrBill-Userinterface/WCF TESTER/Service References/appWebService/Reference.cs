//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_TESTER.appWebService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HttpPostedFileBase", Namespace="http://schemas.datacontract.org/2004/07/System.Web")]
    [System.SerializableAttribute()]
    public partial class HttpPostedFileBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="appWebService.IAppWebService")]
    public interface IAppWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/DoWork", ReplyAction="http://tempuri.org/IAppWebService/DoWorkResponse")]
        string DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/DoWork", ReplyAction="http://tempuri.org/IAppWebService/DoWorkResponse")]
        System.Threading.Tasks.Task<string> DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/Login", ReplyAction="http://tempuri.org/IAppWebService/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/Login", ReplyAction="http://tempuri.org/IAppWebService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/GetUserTrans", ReplyAction="http://tempuri.org/IAppWebService/GetUserTransResponse")]
        string GetUserTrans(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/GetUserTrans", ReplyAction="http://tempuri.org/IAppWebService/GetUserTransResponse")]
        System.Threading.Tasks.Task<string> GetUserTransAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/FileUpload", ReplyAction="http://tempuri.org/IAppWebService/FileUploadResponse")]
        void FileUpload(string fileName, string supplier, System.DateTime date1, System.Nullable<decimal> total, string destination, WCF_TESTER.appWebService.HttpPostedFileBase file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppWebService/FileUpload", ReplyAction="http://tempuri.org/IAppWebService/FileUploadResponse")]
        System.Threading.Tasks.Task FileUploadAsync(string fileName, string supplier, System.DateTime date1, System.Nullable<decimal> total, string destination, WCF_TESTER.appWebService.HttpPostedFileBase file);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppWebServiceChannel : WCF_TESTER.appWebService.IAppWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppWebServiceClient : System.ServiceModel.ClientBase<WCF_TESTER.appWebService.IAppWebService>, WCF_TESTER.appWebService.IAppWebService {
        
        public AppWebServiceClient() {
        }
        
        public AppWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DoWork() {
            return base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task<string> DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public string GetUserTrans(string username, string password) {
            return base.Channel.GetUserTrans(username, password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserTransAsync(string username, string password) {
            return base.Channel.GetUserTransAsync(username, password);
        }
        
        public void FileUpload(string fileName, string supplier, System.DateTime date1, System.Nullable<decimal> total, string destination, WCF_TESTER.appWebService.HttpPostedFileBase file) {
            base.Channel.FileUpload(fileName, supplier, date1, total, destination, file);
        }
        
        public System.Threading.Tasks.Task FileUploadAsync(string fileName, string supplier, System.DateTime date1, System.Nullable<decimal> total, string destination, WCF_TESTER.appWebService.HttpPostedFileBase file) {
            return base.Channel.FileUploadAsync(fileName, supplier, date1, total, destination, file);
        }
    }
}
